// === MENU MOBILE ===
const menuIcon = document.getElementById("menu-icon");
const navLinks = document.querySelector(".nav-links");
if (menuIcon && navLinks) {
  menuIcon.addEventListener("click", () => navLinks.classList.toggle("active"));
}

// === D·ª∞ B√ÅO TH·ªúI TI·∫æT (TP.HCM) ===
const latitude = 10.7769;
const longitude = 106.7009;
const weatherContainer = document.querySelector(".weather-container");

async function loadWeather() {
  if (!weatherContainer) return;
  weatherContainer.innerHTML = "<p>‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</p>";

  try {
    const res = await fetch(
      `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,weathercode&timezone=Asia%2FBangkok`
    );
    const data = await res.json();

    const hours = data?.hourly?.time?.slice(0, 24);
    const temps = data?.hourly?.temperature_2m?.slice(0, 24);
    const codes = data?.hourly?.weathercode?.slice(0, 24);

    if (!hours || !temps) throw new Error("Thi·∫øu d·ªØ li·ªáu");

    const icons = {
      0: "‚òÄÔ∏è", 1: "üå§Ô∏è", 2: "‚õÖ", 3: "‚òÅÔ∏è",
      45: "üå´Ô∏è", 48: "üå´Ô∏è",
      51: "üå¶Ô∏è", 53: "üå¶Ô∏è", 55: "üåßÔ∏è",
      56: "üåßÔ∏è", 57: "üåßÔ∏è",
      61: "üåßÔ∏è", 63: "üåßÔ∏è", 65: "üåßÔ∏è",
      66: "üåßÔ∏è", 67: "üåßÔ∏è",
      71: "üå®Ô∏è", 73: "üå®Ô∏è", 75: "‚ùÑÔ∏è", 77: "‚ùÑÔ∏è",
      80: "üå¶Ô∏è", 81: "üåßÔ∏è", 82: "üåßÔ∏è",
      85: "üå®Ô∏è", 86: "üå®Ô∏è",
      95: "‚õàÔ∏è", 96: "‚õàÔ∏è", 99: "‚õàÔ∏è"
    };

    weatherContainer.innerHTML = hours
      .map((h, i) => {
        const time = new Date(h).getHours();
        const icon = icons[codes[i]] || "‚ùì";
        return `
          <div class="weather-item">
            <h4>${time}h</h4>
            <p style="font-size:25px">${icon}</p>
            <p>${temps[i].toFixed(1)}¬∞C</p>
          </div>`;
      })
      .join("");
  } catch (err) {
    console.error("‚ùå L·ªói th·ªùi ti·∫øt:", err);
    weatherContainer.innerHTML = "<p>‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt.</p>";
  }
}

// === WIDGET T·ª∂ GI√Å USD/VND ===
async function loadUsdVndRate() {
  const elem = document.getElementById("usd-vnd-rate");
  if (!elem) return;
  elem.textContent = "‚è≥ ƒêang t·∫£i t·ª∑ gi√°...";

  try {
    // API exchangerate.host (n·∫øu l·ªói -> fallback)
    const res = await fetch("https://api.allorigins.win/raw?url=" + encodeURIComponent("https://api.exchangerate.host/latest?base=USD&symbols=VND"));

    const data = await res.json();

    const rate = data?.rates?.VND;
    if (rate) {
      elem.innerHTML = `üí± 1 USD = <strong>${rate.toLocaleString("vi-VN")}</strong> VND`;
    } else {
      throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá");
    }
  } catch (err) {
    console.warn("‚ö†Ô∏è L·ªói t·ª∑ gi√°, d√πng fallback:", err);
    elem.innerHTML = `‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·∫≠t.<br>üíµ 1 USD ‚âà <strong>25,400 VND</strong>`;
  }
}

// === CHUY·ªÇN ƒê·ªîI TI·ªÄN T·ªÜ ===
function swapCurrencies() {
  const from = document.getElementById("fromCurrency");
  const to = document.getElementById("toCurrency");
  if (from && to) {
    const temp = from.value;
    from.value = to.value;
    to.value = temp;
  }
}

async function convertCurrency() {
  const amount = parseFloat(document.getElementById("amount").value);
  const from = document.getElementById("fromCurrency").value.trim().toUpperCase();
  const to = document.getElementById("toCurrency").value.trim().toUpperCase();
  const resultDiv = document.getElementById("result");

  if (isNaN(amount) || amount <= 0) {
    resultDiv.innerHTML = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!";
    return;
  }

  resultDiv.textContent = "‚è≥ ƒêang t√≠nh...";

  try {
    // G·ªçi API th·∫≠t
    const res = await fetch(
      `https://api.exchangerate.host/latest?base=${from}&symbols=${to}`
    );
    if (!res.ok) throw new Error("K·∫øt n·ªëi API l·ªói");
    const data = await res.json();

    const rate = data?.rates?.[to];
    if (!rate) throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá");

    const converted = amount * rate;
    resultDiv.innerHTML = `
      üí± ${amount.toLocaleString()} ${from} = 
      <strong>${converted.toLocaleString(undefined, { maximumFractionDigits: 2 })} ${to}</strong><br>
      <small>1 ${from} = ${rate.toLocaleString(undefined, { maximumFractionDigits: 2 })} ${to}</small>
    `;
  } catch (err) {
    console.warn("‚ö†Ô∏è L·ªói khi convert:", err);
    // fallback ∆∞·ªõc l∆∞·ª£ng th·ªß c√¥ng
    const fallbackRates = {
      USD: 1,
      VND: 25400,
      EUR: 0.92,
      GBP: 0.79,
      JPY: 150,
      KRW: 1350,
      CNY: 7.25,
    };
    const rate = (fallbackRates[to] || 1) / (fallbackRates[from] || 1);
    const converted = amount * rate;
    resultDiv.innerHTML = `
      ‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·∫≠t.<br>
      üí± ∆Ø·ªõc l∆∞·ª£ng: ${amount.toLocaleString()} ${from} ‚âà 
      <strong>${converted.toLocaleString(undefined, { maximumFractionDigits: 2 })} ${to}</strong><br>
      <small>D·ª±a tr√™n t·ª∑ gi√° t·∫°m: 1 ${from} ‚âà ${rate.toLocaleString(undefined, { maximumFractionDigits: 2 })} ${to}</small>
    `;
  }
}


// === KH·ªûI ƒê·ªòNG ===
window.addEventListener("DOMContentLoaded", () => {
  loadWeather();
  loadUsdVndRate();
});
